{"mappings":"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","sources":["<anon>","src/index.js","src/components/Interface/index.js","src/components/Interface/Interface.js","src/constants/root.js","src/components/GameBrain/index.js","src/components/GameBrain/GameBrain.js","src/components/Notification/index.js","src/components/Notification/Notification.js"],"sourcesContent":["const $d13dc42edb43e0c2$export$8394dd06867d02da = document.getElementById(\"game-field\");\nconst $d13dc42edb43e0c2$export$c7f1de08ff81f6ae = document.getElementById(\"notification\");\n\n\n\nclass $9c177eb8f45d9725$var$Interface {\n    render() {\n        let htmlContent = \"\";\n        for(let i = 0; i < 9; i++)htmlContent += `<div class=\"game__cell\" data-index=${i}></div>`;\n        (0, $d13dc42edb43e0c2$export$8394dd06867d02da).innerHTML = `<div class=\"game\">${htmlContent}</div>`;\n    }\n}\nvar $9c177eb8f45d9725$export$2e2bcd8739ae039 = new $9c177eb8f45d9725$var$Interface();\n\n\n\n\n\n\n\nclass $ce5d73a418594fcc$var$Notification {\n    handleClear() {\n        (0, $d13dc42edb43e0c2$export$c7f1de08ff81f6ae).innerHTML = \"\";\n    }\n    render(winnerName) {\n        (0, $d13dc42edb43e0c2$export$c7f1de08ff81f6ae).innerHTML = `\n            <div class=\"notification\">\n                <p class=\"notification__text\">${winnerName} win!</p>\n                <p class=\"notification__question\">Would you like to try again?</p>\n                <div class=\"notification__buttons\">\n                    <button id=\"restart\" class=\"notification__button\" type=\"button\">YES</button> \n                    <button id=\"exit\" class=\"notification__button\" type=\"button\">NO</button> \n                </div>\n            </div>        \n        `;\n    }\n}\nvar $ce5d73a418594fcc$export$2e2bcd8739ae039 = new $ce5d73a418594fcc$var$Notification();\n\n\n\n\nclass $96440070ef922579$var$GameBrain {\n    constructor(){\n        this.activePlayer = 1;\n        this.gameOver = false;\n        this.winCombinations = [\n            [\n                0,\n                1,\n                2\n            ],\n            [\n                3,\n                4,\n                5\n            ],\n            [\n                6,\n                7,\n                8\n            ],\n            [\n                0,\n                3,\n                6\n            ],\n            [\n                1,\n                4,\n                7\n            ],\n            [\n                2,\n                5,\n                8\n            ],\n            [\n                0,\n                4,\n                8\n            ],\n            [\n                2,\n                4,\n                6\n            ]\n        ];\n    }\n    startGame() {\n        (0, $d13dc42edb43e0c2$export$8394dd06867d02da).addEventListener(\"click\", (event)=>{\n            const { target: target } = event;\n            const isCell = target.closest(\".game__cell\");\n            if (!isCell) return;\n            this.draw(isCell);\n        });\n    }\n    draw(cell) {\n        if (this.gameOver) return;\n        const signToDraw = this.activePlayer === 1 ? \"x\" : \"0\";\n        const dataSign = signToDraw === \"x\" ? \"cross\" : \"zero\";\n        if (cell.textContent === \"\") {\n            cell.textContent = signToDraw;\n            cell.dataset.sign = dataSign;\n            this.activePlayer = this.activePlayer === 1 ? 2 : 1;\n            this.checkIfWin();\n        }\n    }\n    startNewGame() {\n        this.gameOver = false;\n        this.clearCells();\n        this.activePlayer = 1;\n        (0, $ce5d73a418594fcc$export$2e2bcd8739ae039).handleClear();\n    }\n    clearCells() {\n        const cells = document.querySelectorAll(\".game__cell\");\n        cells.forEach((cell)=>{\n            cell.innerHTML = \"\";\n            cell.dataset.sign = \"\";\n        });\n    }\n    checkIfWin() {\n        const crossCells = document.querySelectorAll('[data-sign=\"cross\"]');\n        const zeroCells = document.querySelectorAll('[data-sign=\"zero\"]');\n        if (crossCells.length >= 3 || zeroCells.length >= 3) {\n            let crossCellsCombinations = [];\n            let zeroCellsCombinations = [];\n            crossCells.forEach((cell)=>{\n                crossCellsCombinations.push(Number(cell.dataset.index));\n            });\n            zeroCells.forEach((cell)=>{\n                zeroCellsCombinations.push(Number(cell.dataset.index));\n            });\n            let zeroWin = false;\n            let crossWin = false;\n            let winner = \"\";\n            for(let i = 0; i < this.winCombinations.length; i++){\n                const currentCombination = this.winCombinations[i];\n                zeroWin = currentCombination.every((n)=>zeroCellsCombinations.includes(n));\n                crossWin = currentCombination.every((n)=>crossCellsCombinations.includes(n));\n                if (zeroWin || crossWin) {\n                    winner = zeroWin ? \"zero\" : \"cross\";\n                    zeroCellsCombinations = [];\n                    crossCellsCombinations = [];\n                    this.gameOver = true;\n                    break;\n                }\n            }\n            if (this.gameOver) {\n                (0, $ce5d73a418594fcc$export$2e2bcd8739ae039).render(winner);\n                document.getElementById(\"restart\").addEventListener(\"click\", ()=>this.startNewGame());\n                document.getElementById(\"exit\").addEventListener(\"click\", ()=>(0, $ce5d73a418594fcc$export$2e2bcd8739ae039).handleClear());\n            }\n        }\n    }\n}\nvar $96440070ef922579$export$2e2bcd8739ae039 = new $96440070ef922579$var$GameBrain();\n\n\n\n\n\n(0, $9c177eb8f45d9725$export$2e2bcd8739ae039).render();\n(0, $96440070ef922579$export$2e2bcd8739ae039).startGame();\n\n\n//# sourceMappingURL=index.2262c0a9.js.map\n","import Interface from './components/Interface';\nimport GameBrain from './components/GameBrain';\n\nimport './style.css';\n\nInterface.render();\nGameBrain.startGame();\n","export { default } from './Interface';\n","import { ROOT_FIELD } from '../../constants/root';\nimport './Interface.css';\n\nclass Interface {\n    render() {\n        let htmlContent = '';\n        for (let i = 0; i < 9; i++) {\n            htmlContent += `<div class=\"game__cell\" data-index=${i}></div>`;\n        }\n        ROOT_FIELD.innerHTML = `<div class=\"game\">${htmlContent}</div>`;\n    }\n}\n\nexport default new Interface();\n","const ROOT_FIELD = document.getElementById('game-field');\nconst ROOT_NOTIFICATION = document.getElementById('notification');\n\nexport { ROOT_FIELD, ROOT_NOTIFICATION };\n","export { default } from './GameBrain';\n","import { ROOT_FIELD } from '../../constants/root';\nimport Notification from '../Notification';\n\nclass GameBrain {\n    constructor() {\n        this.activePlayer = 1;\n        this.gameOver = false;\n\n        this.winCombinations = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6]\n        ];\n    }\n\n    startGame() {\n        ROOT_FIELD.addEventListener('click', event => {\n            const { target } = event;\n            const isCell = target.closest('.game__cell');\n            if (!isCell) return;\n            this.draw(isCell);\n        });\n    }\n\n    draw(cell) {\n        if (this.gameOver) return;\n        const signToDraw = this.activePlayer === 1 ? 'x' : '0';\n        const dataSign = signToDraw === 'x' ? 'cross' : 'zero';\n        if (cell.textContent === '') {\n            cell.textContent = signToDraw;\n            cell.dataset.sign = dataSign;\n            this.activePlayer = this.activePlayer === 1 ? 2 : 1;\n            this.checkIfWin();\n        }\n    }\n\n    startNewGame() {\n        this.gameOver = false;\n        this.clearCells();\n        this.activePlayer = 1;\n        Notification.handleClear();\n    }\n\n    clearCells() {\n        const cells = document.querySelectorAll('.game__cell');\n        cells.forEach(cell => {\n            cell.innerHTML = '';\n            cell.dataset.sign = '';\n        });\n    }\n\n    checkIfWin() {\n        const crossCells = document.querySelectorAll('[data-sign=\"cross\"]');\n        const zeroCells = document.querySelectorAll('[data-sign=\"zero\"]');\n\n        if (crossCells.length >= 3 || zeroCells.length >= 3) {\n            let crossCellsCombinations = [];\n            let zeroCellsCombinations = [];\n\n            crossCells.forEach(cell => {\n                crossCellsCombinations.push(Number(cell.dataset.index));\n            });\n\n            zeroCells.forEach(cell => {\n                zeroCellsCombinations.push(Number(cell.dataset.index));\n            });\n\n            let zeroWin = false;\n            let crossWin = false;\n            let winner = '';\n            for (let i = 0; i < this.winCombinations.length; i++) {\n                const currentCombination = this.winCombinations[i];\n                zeroWin = currentCombination.every(n => zeroCellsCombinations.includes(n));\n                crossWin = currentCombination.every(n => crossCellsCombinations.includes(n));\n\n                if (zeroWin || crossWin) {\n                    winner = zeroWin ? 'zero' : 'cross';\n                    zeroCellsCombinations = [];\n                    crossCellsCombinations = [];\n                    this.gameOver = true;\n                    break;\n                }\n            }\n\n            if (this.gameOver) {\n                Notification.render(winner);\n                document.getElementById('restart').addEventListener('click', () => this.startNewGame());\n                document.getElementById('exit').addEventListener('click', () => Notification.handleClear());\n            }\n        }\n    }\n}\n\nexport default new GameBrain();\n","export { default } from './Notification';\n","import { ROOT_NOTIFICATION } from '../../constants/root';\nimport './Notification.css';\n\nclass Notification {\n    handleClear() {\n        ROOT_NOTIFICATION.innerHTML = '';\n    }\n\n    render(winnerName) {\n        ROOT_NOTIFICATION.innerHTML = `\n            <div class=\"notification\">\n                <p class=\"notification__text\">${winnerName} win!</p>\n                <p class=\"notification__question\">Would you like to try again?</p>\n                <div class=\"notification__buttons\">\n                    <button id=\"restart\" class=\"notification__button\" type=\"button\">YES</button> \n                    <button id=\"exit\" class=\"notification__button\" type=\"button\">NO</button> \n                </div>\n            </div>        \n        `;\n    }\n}\n\nexport default new Notification();\n"],"names":["$d13dc42edb43e0c2$export$8394dd06867d02da","document","getElementById","$d13dc42edb43e0c2$export$c7f1de08ff81f6ae","$9c177eb8f45d9725$export$2e2bcd8739ae039","render","htmlContent","i","innerHTML","$ce5d73a418594fcc$export$2e2bcd8739ae039","handleClear","winnerName","$96440070ef922579$export$2e2bcd8739ae039","constructor","activePlayer","gameOver","winCombinations","startGame","addEventListener","event","target","isCell","closest","draw","cell","signToDraw","textContent","dataset","sign","checkIfWin","startNewGame","clearCells","cells","querySelectorAll","forEach","crossCells","zeroCells","length","crossCellsCombinations","zeroCellsCombinations","push","Number","index","zeroWin","crossWin","winner","currentCombination","every","n","includes"],"version":3,"file":"index.2262c0a9.js.map"}